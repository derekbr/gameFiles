<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<style>
canvas {
    border:1px solid #d3d3d3;
    background-color: #f1f1f1;
}
</style>

<link rel="stylesheet" href="css/styles.css">

</head>
<body onload="startGame()">

<script>

var myGamePiece;
var myObstacles = [];
var myScore;

function startGame() {
    myGamePiece = new component(10, 10, "#FF7777" , 10, 120);
    myGamePiece.gravity = 0.25;
	
    myScore = new component("30px", "Consolas", "#111111", 280, 40, "text");
	myGameArea.canvas.onmousedown="accelerate(-0.15)";
    myGameArea.start();
	
	
}

var myGameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 480;
        this.canvas.height = 270;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
        this.interval = setInterval(updateGameArea, 20);
		
        },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

function component(width, height, color, x, y, type) {
    this.type = type;
    this.score = 0;
    this.width = width;
    this.height = height;
    this.speedX = 0;
    this.speedY = 0;    
    this.x = x;
    this.y = y;
    this.gravity = 0;
    this.gravitySpeed = 0;
	
    this.update = function() {
        ctx = myGameArea.context;
        if (this.type == "text") {
            ctx.font = this.width + " " + this.height;
            ctx.fillStyle = color;
            ctx.fillText(this.text, this.x, this.y);
        } else {
            ctx.fillStyle = color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    }
    this.newPos = function() {
		if (this.gravitySpeed <-3 ){
			this.gravity=0.15;
			this.gravitySpeed=-3;
		}
		
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        this.hitBottom();
    }
    this.hitBottom = function() {
        var rockbottom = myGameArea.canvas.height - this.height;
        if (this.y > rockbottom) {
            this.y = rockbottom;
            this.gravitySpeed = 0;
        }
		if (this.y < 0) {
			this.y = 0;
			this.speedY = 0 ;
		}
    }
    this.crashWith = function(otherobj) {
        var myleft = this.x;
        var myright = this.x + (this.width);
        var mytop = this.y;
        var mybottom = this.y + (this.height);
        var otherleft = otherobj.x;
        var otherright = otherobj.x + (otherobj.width);
        var othertop = otherobj.y;
        var otherbottom = otherobj.y + (otherobj.height);
        var crash = true;
        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
            crash = false;
        }
		
        return crash;
    }
}

function updateGameArea() {
    var x, height, gap, minHeight, maxHeight, minGap, maxGap;
   
	
	for (i = 0; i < myObstacles.length; i += 1) {
        if (myGamePiece.crashWith(myObstacles[i] )) {
            gameEnd();
			
			return;
			
        } 
    }
    myGameArea.clear();
    myGameArea.frameNo += 1;
    if (myGameArea.frameNo == 1 || everyinterval(100)) {
        x = myGameArea.canvas.width;
        minHeight = 20;
        maxHeight = 200;
        height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);
        minGap = 50;
        maxGap = 200;
        gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);
        myObstacles.push(new component(10, height, "green", x, 0));
        myObstacles.push(new component(10, x - height - gap, "green", x, height + gap));
    }
    for (i = 0; i < myObstacles.length; i += 1) {
        myObstacles[i].x += -1;
        myObstacles[i].update();
    }
	if (myGameArea.frameNo > 510){
    myScore.text="SCORE: " + (myGameArea.frameNo - 460);
    }
	else if (myGameArea.frameNo > 460){
    myScore.text="Go!";
    }
	else if (myGameArea.frameNo > 410){
    myScore.text="1";
    }
	else if (myGameArea.frameNo > 360){
    myScore.text="2";
    }
	else if (myGameArea.frameNo > 310){
    myScore.text="3";
    }
		
	else{
    myScore.text="";
    }
	if(myGameArea.frameNo>00){
	speedVar =1.5;
	}
	else if(myGameArea.frameNo>250){
	speedVar =1.25;
	}
	myScore.update();
    myGamePiece.newPos();
    myGamePiece.update();
}

function everyinterval(n) {
    if ((myGameArea.frameNo / n) % 1 == 0) {return true;}
    return false;
}

function accelerate(n) {
	
    myGamePiece.gravity = n;
}

function gameEnd(){

	var score = myGameArea.frameNo - 460;	
	
	var userNameUrl= window.top.location.href;
	
	function parseURLParams(url) {
    var queryStart = url.indexOf("?") + 1,
        queryEnd   = url.indexOf("#") + 1 || url.length + 1,
        query = url.slice(queryStart, queryEnd - 1),
        pairs = query.replace(/\+/g, " ").split("&"),
        parms = {}, i, n, v, nv;

    if (query === url || query === "") {
        return;
    }

    for (i = 0; i < pairs.length; i++) {
        nv = pairs[i].split("=");
        n = decodeURIComponent(nv[0]);
        v = decodeURIComponent(nv[1]);

        if (!parms.hasOwnProperty(n)) {
            parms[n] = [];
        }

        parms[n].push(nv.length === 2 ? v : null);
    }
    return parms;
}
	
	var userInfo = parseURLParams(userNameUrl);
	document.getElementById("username").value= userInfo.user;
	document.getElementById("gameScore").value = score;
	document.getElementById("gameScore").style.visibility= 'visible';
	document.getElementById("username").style.visibility= 'visible';
	document.getElementById("buttons").style.visibility= 'visible';
	
	
	return;
}
</script>
<br>
<button id="buttons" class="upBtn" onmousedown="accelerate(-0.15)" onmouseup="accelerate(0.15)">UP</button>

<h5>Click the button to stay up</h5>

<button id="buttons" onclick="window.location.reload();">Restart</button><br>

<form id ="formInfo" action="./ended.ejs"  style="visibility:hidden;">
  
		<input id="username" type="text" value="" placeholder="Input your username" name="user" required readonly><br>
		<input id="gameScore" type="text" placeholder="0" name="score" required readonly><br>
		<input id="buttons" type="submit"  value="Submit score!" style="visibility:visible;"><br>
		
</form>


</body>
</html>
